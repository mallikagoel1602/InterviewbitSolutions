void tree_free(TreeNode* A)
{
    if(A)
    {
        tree_free(A->left);
        tree_free(A->right);
        free(A->left);
        free(A->right);
    }
}

void allpaths(vector<vector<int>>& res, vector<int>& temp, TreeNode* A,  int sum){
    if (!A)
        return;
    sum -= A->val;
    temp.emplace_back(A->val);
    if (!A->left && !A->right && sum == 0)
        res.emplace_back(temp);
    if (A->left)
        allpaths(res, temp, A->left, sum);
    if (A->right)
        allpaths(res, temp, A->right, sum);
    temp.pop_back();
}
vector<vector<int> > Solution::pathSum(TreeNode* A, int B) {
    vector<vector<int>> res;
    vector<int> temp;
    int i = 0;
    allpaths(res, temp, A, B);
    tree_free(A);
    free(A);
    return res;
}
